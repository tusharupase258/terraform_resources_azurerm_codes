In Terraform, variables allow you to parameterize your configurations, making them reusable and easier to manage. Here is a detailed guide on the different types of variables in Terraform along with examples for each type.

## Variable Types and Examples

### 1. String

A string variable is a single line of text. 

**Definition:**

```hcl
variable "example_string" {
  description = "An example string variable"
  type        = string
  default     = "default_value"
}
```

**Usage:**

```hcl
resource "azurerm_resource_group" "example" {
  name     = var.example_string
  location = "West Europe"
}
```

### 2. Number

A number variable represents a numerical value.

**Definition:**

```hcl
variable "example_number" {
  description = "An example number variable"
  type        = number
  default     = 42
}
```

**Usage:**

```hcl
resource "azurerm_virtual_machine" "example" {
  name                  = "example-vm"
  location              = "West Europe"
  resource_group_name   = azurerm_resource_group.example.name
  vm_size               = "Standard_DS1_v2"
  network_interface_ids = [azurerm_network_interface.example.id]
  provision_vm_agent    = true
  os_disk {
    name              = "example-os-disk"
    caching           = "ReadWrite"
    storage_account_type = "Standard_LRS"
    disk_size_gb      = var.example_number
  }
}
```

### 3. Boolean

A boolean variable can be either `true` or `false`.

**Definition:**

```hcl
variable "example_boolean" {
  description = "An example boolean variable"
  type        = bool
  default     = true
}
```

**Usage:**

```hcl
resource "azurerm_virtual_machine" "example" {
  name                  = "example-vm"
  location              = "West Europe"
  resource_group_name   = azurerm_resource_group.example.name
  vm_size               = "Standard_DS1_v2"
  network_interface_ids = [azurerm_network_interface.example.id]
  provision_vm_agent    = var.example_boolean
  os_disk {
    name              = "example-os-disk"
    caching           = "ReadWrite"
    storage_account_type = "Standard_LRS"
    disk_size_gb      = 30
  }
}
```

### 4. List

A list variable is a collection of values, all of the same type.

**Definition:**

```hcl
variable "example_list" {
  description = "An example list variable"
  type        = list(string)
  default     = ["item1", "item2", "item3"]
}
```

**Usage:**

```hcl
resource "azurerm_network_security_group" "example" {
  name                = "example-nsg"
  location            = "West Europe"
  resource_group_name = azurerm_resource_group.example.name

  security_rule {
    name                       = "allow-ssh"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_ranges    = var.example_list
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}
```

### 5. Map

A map variable is a collection of key-value pairs.

**Definition:**

```hcl
variable "example_map" {
  description = "An example map variable"
  type        = map(string)
  default     = {
    key1 = "value1"
    key2 = "value2"
  }
}
```

**Usage:**

```hcl
resource "azurerm_storage_account" "example" {
  name                     = "examplestorageaccount"
  resource_group_name      = azurerm_resource_group.example.name
  location                 = "West Europe"
  account_tier             = "Standard"
  account_replication_type = "LRS"
  tags                     = var.example_map
}
```

### 6. Object

An object variable allows you to define a complex structure with multiple attributes.

**Definition:**

```hcl
variable "example_object" {
  description = "An example object variable"
  type = object({
    name    = string
    age     = number
    enabled = bool
  })
  default = {
    name    = "example"
    age     = 30
    enabled = true
  }
}
```

**Usage:**

```hcl
resource "azurerm_virtual_machine" "example" {
  name                  = var.example_object.name
  location              = "West Europe"
  resource_group_name   = azurerm_resource_group.example.name
  vm_size               = "Standard_DS1_v2"
  network_interface_ids = [azurerm_network_interface.example.id]
  provision_vm_agent    = var.example_object.enabled
  os_disk {
    name              = "example-os-disk"
    caching           = "ReadWrite"
    storage_account_type = "Standard_LRS"
    disk_size_gb      = var.example_object.age
  }
}
```

### 7. Tuple

A tuple variable is a sequence of values of potentially different types.

**Definition:**

```hcl
variable "example_tuple" {
  description = "An example tuple variable"
  type        = tuple([string, number, bool])
  default     = ["example", 42, true]
}
```

**Usage:**

```hcl
resource "azurerm_virtual_machine" "example" {
  name                  = element(var.example_tuple, 0)
  location              = "West Europe"
  resource_group_name   = azurerm_resource_group.example.name
  vm_size               = "Standard_DS1_v2"
  network_interface_ids = [azurerm_network_interface.example.id]
  provision_vm_agent    = element(var.example_tuple, 2)
  os_disk {
    name              = "example-os-disk"
    caching           = "ReadWrite"
    storage_account_type = "Standard_LRS"
    disk_size_gb      = element(var.example_tuple, 1)
  }
}
```

## Advanced Variable Options

### Validation

You can add validation rules to ensure that variable values meet certain criteria.

**Example:**

```hcl
variable "example_number" {
  description = "An example number variable"
  type        = number
  default     = 42

  validation {
    condition     = var.example_number >= 1 && var.example_number <= 100
    error_message = "The example_number variable must be between 1 and 100."
  }
}
```

### Sensitive Variables

Marking a variable as sensitive ensures that its value is not shown in logs or terminal output.

**Example:**

```hcl
variable "example_sensitive" {
  description = "An example sensitive variable"
  type        = string
  sensitive   = true
}
```

### Variable Files

You can define variable values in separate files to manage different environments (e.g., dev, staging, prod).

**Example:**

`dev.tfvars`:

```hcl
example_string = "dev_value"
example_number = 10
```

`staging.tfvars`:

```hcl
example_string = "staging_value"
example_number = 20
```

**Usage:**

```sh
terraform apply -var-file="dev.tfvars"
```

By understanding and utilizing these variable types and features, you can create flexible and maintainable Terraform configurations.
